
void LoadIC::UpdateCaches(LookupIterator* lookup) {
  if (state() == UNINITIALIZED) {
    // This is the first time we execute this inline cache. Set the target to
    // the pre monomorphic stub to delay setting the monomorphic state.
    ConfigureVectorState(PREMONOMORPHIC);
    TRACE_IC("LoadIC", lookup->name());
    return;
  }
  Handle<Code> code;
  if (lookup->state() == LookupIterator::JSPROXY ||
      lookup->state() == LookupIterator::ACCESS_CHECK) {
    code = slow_stub();
  } else if (!lookup->IsFound()) {
    if (kind() == Code::LOAD_IC && !is_strong(language_mode())) {
      code = NamedLoadHandlerCompiler::ComputeLoadNonexistent(lookup->name(),
                                                              receiver_map());
      // TODO(jkummerow/verwaest): Introduce a builtin that handles this case.
      if (code.is_null()) code = slow_stub();
    } else {
      code = slow_stub();
    }
  } else {
    if (lookup->state() == LookupIterator::ACCESSOR) {
      Handle<Object> accessors = lookup->GetAccessors();
      Handle<Map> map = receiver_map();
      if (accessors->IsExecutableAccessorInfo()) {
        Handle<ExecutableAccessorInfo> info =
            Handle<ExecutableAccessorInfo>::cast(accessors);
        if ((v8::ToCData<Address>(info->getter()) != 0) &&
            !ExecutableAccessorInfo::IsCompatibleReceiverMap(isolate(), info,
                                                             map)) {
          TRACE_GENERIC_IC(isolate(), "LoadIC", "incompatible receiver type");
          code = slow_stub();
        }
      } else if (accessors->IsAccessorPair()) {
        Handle<Object> getter(Handle<AccessorPair>::cast(accessors)->getter(),
                              isolate());
        Handle<JSObject> holder = lookup->GetHolder<JSObject>();
        Handle<Object> receiver = lookup->GetReceiver();
        if (getter->IsJSFunction() && holder->HasFastProperties()) {
          Handle<JSFunction> function = Handle<JSFunction>::cast(getter);
          if (receiver->IsJSObject() || function->shared()->IsBuiltin() ||
              !is_sloppy(function->shared()->language_mode())) {
            CallOptimization call_optimization(function);
            if (call_optimization.is_simple_api_call() &&
                !call_optimization.IsCompatibleReceiver(receiver, holder)) {
              TRACE_GENERIC_IC(isolate(), "LoadIC",
                               "incompatible receiver type");
              code = slow_stub();
            }
          }
        }
      }
    }
    if (code.is_null()) code = ComputeHandler(lookup);
  }
  PatchCache(lookup->name(), code);
  TRACE_IC("LoadIC", lookup->name());
}
